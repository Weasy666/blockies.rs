var N=null,E="",T="t",U="u",searchIndex={};
var R=["blockies","Size of blockies (number of blocks per row in the image),…","Pixel size (width and height) of a single block in the…","Foreground color of the image, default: None (derived from…","background_color","create_icon","Write the PNG image of the blockies for a given `seed`…","result","error","try_from","borrow_mut","try_into","type_id","Ethereum"];

searchIndex[R[0]]={"doc":"blockies.rs","i":[[4,"Error",R[0],"Generic error type",N,N],[13,"PngEncoding",E,"There has been an internal error when doing the PNG encoding",0,N],[13,"Io",E,"There has been an error writing the PNG to IO",0,N],[13,"PaletteTooBig",E,"The palette is over 256 colors",0,N],[13,"PaletteTooSmall",E,"The palette is smaller than 2 colors (what's the point?)",0,N],[3,"Classic",E,"Context struct for creating an classic 2-color Blockies.",N,N],[12,"size",E,R[1],1,N],[12,"scale",E,R[2],1,N],[12,"color",E,R[3],1,N],[12,R[4],E,"Background color of the image, default: None (white)",1,N],[3,R[13],E,"Context struct for creating an Ethereum-style 3-color…",N,N],[12,"size",E,R[1],2,N],[12,"scale",E,R[2],2,N],[12,"color",E,R[3],2,N],[12,R[4],E,"Background color of the image, default: None (derived from…",2,N],[12,"spot_color",E,"Spot color of the image, default: None (derived form seed)",2,N],[11,R[5],E,R[6],1,[[["write"],["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,R[5],E,R[6],2,[[["write"],["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,"to_owned",E,E,0,[[["self"]],[T]]],[11,"clone_into",E,E,0,[[[T],["self"]]]],[11,R[9],E,E,0,[[[U]],[R[7]]]],[11,"borrow",E,E,0,[[["self"]],[T]]],[11,R[12],E,E,0,[[["self"]],["typeid"]]],[11,R[10],E,E,0,[[["self"]],[T]]],[11,R[11],E,E,0,[[],[R[7]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[9],E,E,1,[[[U]],[R[7]]]],[11,"borrow",E,E,1,[[["self"]],[T]]],[11,R[12],E,E,1,[[["self"]],["typeid"]]],[11,R[10],E,E,1,[[["self"]],[T]]],[11,R[11],E,E,1,[[],[R[7]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[9],E,E,2,[[[U]],[R[7]]]],[11,"borrow",E,E,2,[[["self"]],[T]]],[11,R[12],E,E,2,[[["self"]],["typeid"]]],[11,R[10],E,E,2,[[["self"]],[T]]],[11,R[11],E,E,2,[[],[R[7]]]],[11,"fmt",E,E,0,[[["formatter"],["self"]],[[R[8]],[R[7],[R[8]]]]]],[11,"clone",E,E,0,[[["self"]],[R[8]]]],[11,"from",E,E,0,[[["encodingerror"]],[R[8]]]],[11,"eq",E,E,0,[[[R[8]],["self"]],["bool"]]],[11,"default",E,E,1,[[],["self"]]],[11,"default",E,E,2,[[],["self"]]]],"p":[[4,"Error"],[3,"Classic"],[3,R[13]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);